---
import Base from "@/layouts/Base.astro";
import { BiLoaderAlt } from "react-icons/bi";
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";

const { cookies } = Astro
/* Check if the user is authenticated */
const auth = getAuth(app);
if (cookies && cookies.has("__session")) {
  const sessionCookie = cookies.get("__session")?.value;
  if( sessionCookie ){
    const decodedCookie = await auth.verifySessionCookie(sessionCookie);
    if (decodedCookie) {
      return Astro.redirect("/");
    }
  }
}
---

<Base title="Login">
  <section class="section">
    <div class="container">
      <div class="row">
        <div class="col-11 sm:col-9 md:col-7 mx-auto">
          <div class="mb-14 text-center">
            <h2 class="max-md:h1 md:mb-2">Login</h2>
            <p class="md:text-lg">
              Please fill your email and password to login
            </p>
          </div>

          <form id="loginForm">
            <div>
              <label class="form-label">Email Address</label>
              <input
                class="form-input"
                placeholder="Type your email"
                type="email"
                name="email"
                required
              />
            </div>

            <div>
              <label class="form-label mt-8">Password</label>
              <input
                class="form-input"
                placeholder="********"
                type="password"
                name="password"
                required
              />
            </div>

            <div id="errorMessages" class="mt-2"></div>

            <button
              type="submit"
              class="btn btn-primary md:text-lg md:font-medium w-full mt-10"
            >
              <span id="buttonText">Log In</span>
              <BiLoaderAlt
                className="animate-spin mx-auto hidden"
                size={26}
                id="loader"
              />
            </button>
          </form>

          <div class="flex gap-x-2 text-sm md:text-base mt-4">
            <p class="text-text-light dark:text-darkmode-text-light">
              Don't have an account?
            </p>
            <a
              class="underline font-medium text-text-dark dark:text-darkmode-text-dark"
              href="/sign-up"
            >
              Register
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    import {
      getAuth,
      inMemoryPersistence,
      signInWithEmailAndPassword,
    } from "firebase/auth";
    import { app } from "../firebase/client"

    const auth = getAuth(app);
    auth.setPersistence(inMemoryPersistence);


    interface LoginResponse {
      token: string;
      customer: object;
    }

    interface ErrorResponse {
      errors: { code?: string; message: string }[];
    }

    const loginForm = document.getElementById("loginForm") as HTMLFormElement;
    const errorMessagesDiv = document.getElementById(
      "errorMessages"
    ) as HTMLDivElement;
    const buttonText = document.getElementById("buttonText") as HTMLSpanElement;
    const loader = document.getElementById("loader") as HTMLElement;

    loginForm?.addEventListener("submit", async (e: SubmitEvent) => {
      e.preventDefault();

      const formData = new FormData(loginForm);
      const email = formData.get("email") as string;
      const password = formData.get("password") as string;

      if (!email || !password) {
        errorMessagesDiv.innerHTML =
          '<p class="font-medium text-red-500">Email and password are required.</p>';
        return;
      }

      try {
        buttonText?.classList.add("hidden");
        loader?.classList.remove("hidden");
        
        const userCredential = await signInWithEmailAndPassword(
          auth,
          email,
          password
        );
        const idToken = await userCredential.user.getIdToken();

        const response = await fetch("/api/login", {
          method: "GET",
          headers: { 
            Authorization: `Bearer ${idToken}`
          },
        });

        if (!response.ok) {
          const responseData: ErrorResponse = await response.json();
          const errors = responseData.errors || [];

          errorMessagesDiv.innerHTML = errors
            .map(
              (error) =>
                `<p class="font-medium text-red-500">
                  *${
                    error.code === "UNIDENTIFIED_CUSTOMER"
                      ? error.message
                      : "Invalid Email or Password"
                  }
                </p>`
            )
            .join("");
          return;
        }

        const responseData: LoginResponse = await response.json();

        // Clear errors and save user data to localStorage
        errorMessagesDiv.innerHTML = "";
        localStorage.setItem("user", JSON.stringify(responseData));
        window.location.href = "/";
      } catch (error) {
        console.error("Error during login:", error);
        errorMessagesDiv.innerHTML =
          '<p class="font-medium text-red-500">An error occurred. Please try again.</p>';
      } finally {
        buttonText?.classList.remove("hidden");
        loader?.classList.add("hidden");
      }
    });
  </script>
</Base>
